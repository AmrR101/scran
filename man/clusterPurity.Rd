% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clusterPurity.R
\name{clusterPurity}
\alias{clusterPurity}
\alias{clusterPurity,ANY-method}
\alias{clusterPurity,SingleCellExperiment-method}
\title{Evaluate cluster purity}
\usage{
clusterPurity(x, ...)

\S4method{clusterPurity}{ANY}(
  x,
  clusters,
  k = 50,
  transposed = FALSE,
  subset.row = NULL,
  BNPARAM = KmknnParam(),
  BPPARAM = SerialParam()
)

\S4method{clusterPurity}{SingleCellExperiment}(x, ..., assay.type = "logcounts", use.dimred = NULL)
}
\arguments{
\item{x}{For the ANY method, a numeric matrix-like object containing expression values for genes (rows) and cells (columns).
If \code{transposed=TRUE}, cells should be in rows and reduced dimensions should be in the columns.

For the \linkS4class{SingleCellExperiment} method, a SingleCellExperiment object containing an expression matrix.
If \code{use.dimred} is supplied, it should contain a reduced dimension result in its \code{\link{reducedDims}}.}

\item{...}{For the generic, arguments to pass to specific methods.
For the SingleCellExperiment method, arguments to pass to the ANY method.}

\item{clusters}{Factor specifying the cluster identity for each cell.}

\item{k}{Integer scalar specifying the number of nearest neighbors to use to determine the radius of the hyperspheres.}

\item{transposed}{Logical scalar specifying whether \code{x} contains cells in the rows.}

\item{subset.row}{See \code{?"\link{scran-gene-selection}"}.}

\item{BNPARAM}{A \linkS4class{BiocNeighborParam} object specifying the nearest neighbor algorithm.
This should be an algorithm supported by \code{\link{findNeighbors}}.}

\item{BPPARAM}{A \linkS4class{BiocParallelParam} object indicating whether and how parallelization should be performed across genes.}

\item{assay.type}{A string specifying which assay values to use.}

\item{use.dimred}{A string specifying whether existing values in \code{reducedDims(x)} should be used.}
}
\value{
A numeric vector of purity values for each cell in \code{x}.
}
\description{
Use a hypersphere-based approach to compute the \dQuote{purity} of each cluster based on the number of contaminating cells in its region of the coordinate space.
}
\details{
The purity of a cluster is quantified by creating a hypersphere around each cell in the cluster
and computing the proportion of cells in that hypersphere from the same cluster.
If all cells in a cluster have proportions close to 1, this indicates that the cluster is highly pure,
i.e., there are few cells from other clusters in its region of the coordinate space.
The distribution of purities for each cluster can be used as a measure of separation from other clusters.

In most cases, the majority of cells of a cluster will have high purities, corresponding to cells close to the cluster center;
and a fraction will have low values, corresponding to cells lying at the boundaries of two adjacent clusters,
A high degree of over-clustering will manifest as a majority of cells with purities close to zero.

The choice of \code{k} is used only to determine an appropriate value for the hypersphere radius.
We use hyperspheres as this is robust to changes in density throughout the coordinate space,
in contrast to computing purity based on the proportion of k-nearest neighbors in the same cluster.
For example, the latter will fail most obviously when the size of the cluster is less than \code{k}.

Technically, purity values are computed after weighting each cell by the reciprocal of the number of cells in the same cluster.
Otherwise, clusters with more cells will have higher purities as any contamination is offset by the bulk of cells.
By comparison, an adjacent cluster with few cells will have lower purities.
Without weighting, this effect would compromise comparisons between clusters.
}
\examples{
library(scater)
sce <- mockSCE()
sce <- logNormCounts(sce)

g <- buildSNNGraph(sce)
clusters <- igraph::cluster_walktrap(g)$membership
out <- clusterPurity(sce, clusters)
boxplot(split(out, clusters))

# Mocking up a stronger example:
ngenes <- 1000
centers <- matrix(rnorm(ngenes*3), ncol=3)
clusters <- sample(1:3, ncol(sce), replace=TRUE)

y <- centers[,clusters]
y <- y + rnorm(length(y))

out2 <- clusterPurity(y, clusters)
boxplot(split(out2, clusters))

}
\author{
Aaron Lun
}
