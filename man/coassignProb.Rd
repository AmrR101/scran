% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coassignProb.R
\name{coassignProb}
\alias{coassignProb}
\title{Compute coassignment probabilities}
\usage{
coassignProb(ref, alt, summarize = FALSE)
}
\arguments{
\item{ref}{A character vector or factor containing one set of groupings, considered to be the reference.}

\item{alt}{A character vector or factor containing another set of groupings.}

\item{summarize}{Logical scalar indicating whether the output matrix should be converted into a per-label summary.}
}
\value{
If \code{summarize=FALSE}, a numeric matrix is returned with upper triangular entries filled with the coassignment probabilities for each pair of labels in \code{ref}.

Otherwise, a \linkS4class{DataFrame} is returned with one row per label in \code{ref} containing the \code{self} and \code{other} coassignment probabilities.
}
\description{
Compute coassignment probabilities for each label in a reference grouping when compared to an alternative grouping of samples.
}
\details{
The coassignment probability for each pair of labels in \code{ref} is the probability that a randomly chosen cells from each of the two reference labels will have the same label in \code{alt}.
High coassignment probabilities indicate that a particular pair of labels in \code{ref} are frequently assigned to the same label in \code{alt}, which has some implications for cluster stability.

When \code{summarize=TRUE}, we summarize the matrix of coassignment probabilities into a set of per-label value.
The self co-assignment probability is simply the diagonal entry of the matrix, i.e., the probability that two cells from the same label in \code{ref} also have the same label in \code{alt}.
The other coassignment probability is the sum of all other entries involving that label, i.e., the sum of probabilities across all other labels.

In general, \code{ref} is well-recapitulated by \code{alt} if the diagonal entries of the matrix is much higher than the sum of the off-diagonal entries.
This manifests as higher values for the self probabilities compared to the other probabilities.
}
\examples{
library(scater)
sce <- mockSCE(ncells=200)
sce <- logNormCounts(sce)

clust1 <- kmeans(t(logcounts(sce)),3)$cluster
clust2 <- kmeans(t(logcounts(sce)),5)$cluster

coassignProb(clust1, clust2)
coassignProb(clust1, clust2, summarize=TRUE)

}
\seealso{
\code{\link{bootstrapCluster}}, to compute co-assignment probabilities across bootstrap replicates.
}
\author{
Aaron Lun
}
